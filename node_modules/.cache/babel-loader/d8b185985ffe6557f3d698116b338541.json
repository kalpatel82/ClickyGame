{"ast":null,"code":"var _jsxFileName = \"/Users/kp/homework_repos/ClickyGame/clickygame/src/App.js\";\nimport React, { Component } from \"react\";\nimport ImageNames from \"./ImageNames\";\nimport Banner from \"./components/Banner\";\nimport Navbar from \"./components/Navbar\";\nimport ImageBlockListing from \"./components/ImageBlockListing\";\nimport Footer from \"./components/Footer\";\nimport jumbotron from \"./components/jumbotron/jumbotron\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageNames: ImageNames,\n      clickedImage: [],\n      score: 0,\n      highScore: 0,\n      message: \"Click image to start!\",\n      status: 0 // status: 0 = game started, 1 = won, 2 = loss\n\n    };\n\n    this.handleClick = event => {\n      const clickedImageName = event.target.alt;\n      const previousClicks = this.clickedOnce(clickedImageName);\n\n      if (previousClicks) {\n        this.setState({\n          imageNames: this.shuffle(this.state.ImageNames),\n          clickedImage: [],\n          score: 0,\n          message: \"Game Over! Already Clicked!\",\n          status: 2\n        }, () => {});\n      } else {\n        let newScore = this.state.score + 1;\n\n        if (newScore === this.state.imageNames.length) {\n          this.setState({\n            imageNames: this.shuffle(this.state.imageNames),\n            clickedImages: [],\n            score: 0,\n            highScore: newScore,\n            feedback: \"Congrats! You Have Guessed All Of The Images Correctly!\",\n            gameStatus: 1\n          });\n        } else {\n          const clickedImagesCopy = this.state.clickedImage.slice();\n          clickedImagesCopy.push(clickedImageName);\n          const newHighScore = newScore > this.state.highScore ? newScore : this.state.highScore;\n          this.setState({\n            imageFileNames: this.shuffle(this.state.imageFileNames),\n            // imageFileNames: this.state.imageFileNames, //for debugging only\n            clickedImages: clickedImagesCopy,\n            score: newScore,\n            highScore: newHighScore,\n            feedback: \"Yes! You Guessed The Image Correctly!\",\n            gameStatus: 0\n          }, () => {});\n        }\n      }\n    };\n\n    this.imageClickedPreviously = clickedImageName => {\n      for (let index = 0; index < this.state.clickedImages.length; index++) {\n        if (this.state.clickedImage[index] === clickedImageName) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.shuffle = array => {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      imageNames: this.shuffle(this.state.imageNames)\n    }, () => {\n      console.log(\"Images shuffled on start\");\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"jumbotron\", {\n      score: this.state.score,\n      topScore: this.state.highScore,\n      feedback: this.state.message,\n      gameStatus: this.state.status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(ImageBlockListing, {\n      imageFileNames: this.state.imageNames,\n      clickHandler: this.handleClick,\n      gameStatus: this.state.status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kp/homework_repos/ClickyGame/clickygame/src/App.js"],"names":["React","Component","ImageNames","Banner","Navbar","ImageBlockListing","Footer","jumbotron","App","state","imageNames","clickedImage","score","highScore","message","status","handleClick","event","clickedImageName","target","alt","previousClicks","clickedOnce","setState","shuffle","newScore","length","clickedImages","feedback","gameStatus","clickedImagesCopy","slice","push","newHighScore","imageFileNames","imageClickedPreviously","index","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","componentDidMount","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageNames from \"./ImageNames\";\nimport Banner from \"./components/Banner\";\nimport Navbar from \"./components/Navbar\"\nimport ImageBlockListing from \"./components/ImageBlockListing\";\nimport Footer from \"./components/Footer\";\nimport jumbotron from \"./components/jumbotron/jumbotron\";\n\nclass App extends Component{\n  state = {\n    imageNames: ImageNames,\n    clickedImage: [],\n    score: 0,\n    highScore: 0,\n    message: \"Click image to start!\",\n    status: 0 \n    // status: 0 = game started, 1 = won, 2 = loss\n  };\n\n  componentDidMount(){\n    this.setState({\n      imageNames: this.shuffle(this.state.imageNames)\n    }, () => {\n      console.log(\"Images shuffled on start\");\n    });\n  }\n\n  handleClick = event => {\n\n    const clickedImageName = event.target.alt;\n\n    const previousClicks = this.clickedOnce(clickedImageName);\n\n    if (previousClicks){\n      this.setState({\n        imageNames: this.shuffle(this.state.ImageNames),\n        clickedImage: [],\n        score: 0,\n        message: \"Game Over! Already Clicked!\",\n        status: 2\n      },() => {\n      });\n    } else {\n      let newScore = this.state.score +1;\n      if (newScore === this.state.imageNames.length){\n        this.setState({\n          imageNames: this.shuffle(this.state.imageNames),\n\n          clickedImages: [],\n          score: 0,\n          highScore: newScore,\n          feedback: \"Congrats! You Have Guessed All Of The Images Correctly!\",\n          gameStatus: 1\n       });\n      } else {\n        const clickedImagesCopy = this.state.clickedImage.slice();\n        clickedImagesCopy.push(clickedImageName);\n        const newHighScore = (newScore > this.state.highScore) ? newScore : this.state.highScore;\n        this.setState({\n        imageFileNames: this.shuffle(this.state.imageFileNames),\n        // imageFileNames: this.state.imageFileNames, //for debugging only\n          clickedImages: clickedImagesCopy,\n          score: newScore,\n          highScore: newHighScore,\n          feedback: \"Yes! You Guessed The Image Correctly!\",\n          gameStatus: 0\n          }, () => {\n          });\n        }\n      }\n    };\n\n    imageClickedPreviously = (clickedImageName) => {\n      for (let index=0; index<this.state.clickedImages.length; index++) {\n        if (this.state.clickedImage[index] === clickedImageName) {\n          return true;\n        }\n      }\n      return false;\n\n\n  };\n\n  // Copied from stackoverflow post:\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n   return (\n    <div>\n      <Navbar />\n      <jumbotron score={this.state.score} topScore={this.state.highScore} feedback={this.state.message} gameStatus={this.state.status} />\n     \n      <ImageBlockListing imageFileNames={this.state.imageNames} clickHandler={this.handleClick} gameStatus={this.state.status} />\n      <Footer />\n    </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}